diff --git a/node_modules/@react-navigation/native/lib/module/NavigationContainer.js b/node_modules/@react-navigation/native/lib/module/NavigationContainer.js
index 64991f9..8dbb167 100644
--- a/node_modules/@react-navigation/native/lib/module/NavigationContainer.js
+++ b/node_modules/@react-navigation/native/lib/module/NavigationContainer.js
@@ -8,9 +8,9 @@ import { LinkingContext } from "./LinkingContext.js";
 import { LocaleDirContext } from "./LocaleDirContext.js";
 import { DefaultTheme } from "./theming/DefaultTheme.js";
 import { UnhandledLinkingContext } from "./UnhandledLinkingContext.js";
-import { useBackButton } from './useBackButton';
-import { useDocumentTitle } from './useDocumentTitle';
-import { useLinking } from './useLinking';
+import { useBackButton } from './useBackButton.js';
+import { useDocumentTitle } from './useDocumentTitle.js';
+import { useLinking } from './useLinking.js';
 import { useThenable } from "./useThenable.js";
 import { jsx as _jsx } from "react/jsx-runtime";
 globalThis.REACT_NAVIGATION_DEVTOOLS = new WeakMap();
diff --git a/node_modules/@react-navigation/native/lib/module/createMemoryHistory.js b/node_modules/@react-navigation/native/lib/module/createMemoryHistory.js
index 474db5e..576fd4f 100644
--- a/node_modules/@react-navigation/native/lib/module/createMemoryHistory.js
+++ b/node_modules/@react-navigation/native/lib/module/createMemoryHistory.js
@@ -21,7 +21,8 @@ export function createMemoryHistory() {
     get index() {
       // We store an id in the state instead of an index
       // Index could get out of sync with in-memory values if page reloads
-      const id = window.history.state?.id;
+      const id = typeof window !== 'undefined' && window.history?.state?.id;
+
       if (id) {
         const index = items.findIndex(item => item.id === id);
         return index > -1 ? index : 0;
@@ -207,8 +208,17 @@ export function createMemoryHistory() {
         }
         listener();
       };
-      window.addEventListener('popstate', onPopState);
-      return () => window.removeEventListener('popstate', onPopState);
+      if (typeof window !== 'undefined' && typeof window.addEventListener === 'function') {
+  window.addEventListener('popstate', onPopState);
+}
+      return () => {
+    if (
+      typeof window !== 'undefined' &&
+      typeof window.removeEventListener === 'function'
+    ) {
+      window.removeEventListener('popstate', onPopState);
+    }
+  };
     }
   };
   return history;
diff --git a/node_modules/@react-navigation/native/lib/module/useDocumentTitle.js b/node_modules/@react-navigation/native/lib/module/useDocumentTitle.js
index 0257450..fe2377a 100644
--- a/node_modules/@react-navigation/native/lib/module/useDocumentTitle.js
+++ b/node_modules/@react-navigation/native/lib/module/useDocumentTitle.js
@@ -1,26 +1,29 @@
 "use strict";
 
 import * as React from 'react';
+
 /**
- * Set the document title for the active screen
+ * Set the document title for the active screen (Web only)
  */
 export function useDocumentTitle(ref, {
   enabled = true,
   formatter = (options, route) => options?.title ?? route?.name
 } = {}) {
   React.useEffect(() => {
-    if (!enabled) {
+    if (!enabled || typeof document === 'undefined') {
       return;
     }
+
     const navigation = ref.current;
+
     if (navigation) {
       const title = formatter(navigation.getCurrentOptions(), navigation.getCurrentRoute());
       document.title = title;
     }
+
     return navigation?.addListener('options', e => {
       const title = formatter(e.data.options, navigation?.getCurrentRoute());
       document.title = title;
     });
   });
 }
-//# sourceMappingURL=useDocumentTitle.js.map
\ No newline at end of file
